#!/usr/bin/env python3

"""
Concept:

rip <device> <disc name guess> <src directory>
metadata_edit <src directory>
encode <src directory>

A turnipripperdb has a config file which specifies the database
It defaults to .turnipripperdb. See config.py
"""

#a Imports
from libturnipripper.database import Database
from libturnipripper.config import Config
from libturnipripper.command import Command
from libturnipripper.rip import RipCommand
from libturnipripper.album import AlbumCommand
from pathlib import Path
import argparse
import sys
import traceback

import typing
from typing import Iterable, Optional, ClassVar, TypeVar, Type, Union, List, Dict, Tuple, Set, Any, cast

#a Toplevel command
class ToplevelCommand(Command):
    name = "turnipripperdb"
    parser_args = {
        ("-c", "--config_file"):{
            "dest":"config_file",
            "help":"Specify config file",
            "metavar":"FILE",
        },
        ("-v", "--verbose"):{
            "dest":"verbose",
            "default":0,
            "type":int,
            "help":"Enable verbosity",
        },
        ("--debug",):{
            "dest":"debug",
            "default":0,
            "type":int,
            "help":"Specify debug level",
        },
    }
    subcommands = [
        RipCommand,
        AlbumCommand,
    ]
    pass

#a Main
def main() -> None:
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        #add_help=False
    )

    cmd = ToplevelCommand(parser)
    args = parser.parse_args()

    config_files = [Path("~/.turnipripperdb"),
                    Path("./.turnipripperdb"),
    ]
    if args.config_file: config_files.append(Path(args.config_file))
    config = Config()
    config.read_config_files(config_files)

    try:
        args.func(parser, config, args)
    except Exception as e:
        if args.debug:
            traceback.print_exc()
            pass
        else:
            print(e)
            pass
        sys.exit(4)
    pass

if __name__ == "__main__":
    main()
